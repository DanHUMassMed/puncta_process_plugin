/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package com.amywalkerlab.puncta_process

import java.awt.Font
import java.awt.Color

import ij.IJ
import ij.plugin.PlugIn

import ij.gui.GenericDialog
import ij.Prefs

import com.amywalkerlab.puncta_process.process.ColorSplitter
import com.amywalkerlab.puncta_process.process.MorphologicalFilters
import com.amywalkerlab.puncta_process.process.ThreeDObjectsCounter
import com.amywalkerlab.puncta_process.process.ZProject
import com.amywalkerlab.puncta_process.process.BatchMeasure
import com.amywalkerlab.puncta_process.process.SummaryExcel

import io.github.dphiggs01.gldataframe.utils.GLLogger


class Puncta_Process implements PlugIn{
    final String COLOR_SPLIT           = 'Color Split'
    final String MORPHOLOGICAL_FILTERS = 'Morphological Filters'
    final String THREE_D_OC            = '3D Object Counter'
    final String Z_PROJECT             = 'Z Project'   
    final String BATCH_MEASURE         = 'Batch Measure' 
    final String SUMMARY_EXCEL         = 'Summary Excel' 
    final String[] process_labels = [COLOR_SPLIT, MORPHOLOGICAL_FILTERS, THREE_D_OC, Z_PROJECT, BATCH_MEASURE, SUMMARY_EXCEL]
  
    @Override
	public void run(String arg) {
        runPipeline() 
        IJ.showMessage("Poncta Process Run Completed.")
	}

    def getOptions() {
        def gd = new GenericDialog("Pipeline - Puncta Process v0.1.1")
        def messageFont = new Font("Arial", Font.BOLD, 14)
        gd.addMessage(PlugInConstants.START_MESSAGE,messageFont)

        def directoryRoot = (String) Prefs.get(PlugInConstants.ROOT_DIR_OPT, IJ.getDirectory("home"));
        gd.addDirectoryField("Base Directory", directoryRoot)   
        
        def p1 = Prefs.get(PlugInConstants.COLOR_SPLIT_OPT, true)
        def p2 = Prefs.get(PlugInConstants.MORPHOLOGICAL_FILTERS_OPT, true)
        def p3 = Prefs.get(PlugInConstants.THREE_D_OBJECT_COUNTER_OPT, true)
        def p4 = Prefs.get(PlugInConstants.Z_PROJECT_OPT, true)
        def p5 = Prefs.get(PlugInConstants.BATCH_MEASURE_OPT, true)
        def p6 = Prefs.get(PlugInConstants.SUMMARY_EXCEL_OPT, true)
        boolean[] process_defaultValues = [p1, p2, p3, p4, p5, p6]
        String[]  process_headings = ["Execute Pipeline Step"]
        
        gd.addCheckboxGroup(3, 3, process_labels, process_defaultValues, process_headings)

        String[]  fluorescence_labels = ["488", "561"]
        def f1 = Prefs.get(PlugInConstants.FOUR_88_OPT, true)
        def f2 = Prefs.get(PlugInConstants.FIVE_61_OPT, true)
        boolean[] fluorescence_defaultValues = [f1, f2]

        String[]  fluorescence_headings = ["Use Fluorescence"]
        gd.addCheckboxGroup(1, 2, fluorescence_labels, fluorescence_defaultValues, fluorescence_headings)
        gd.addMessage("")
        
        def morphologicalFiltersArgs = Prefs.get(PlugInConstants.MORPHOLOGICAL_FILTERS_ARGS, PlugInConstants.MORPHOLOGICAL_FILTERS_DFLT)
        def threeDObjectsCounterArgs = Prefs.get(PlugInConstants.THREE_D_OBJECT_COUNTER_ARGS, PlugInConstants.THREE_D_OBJECT_COUNTER_DFLT)
        def zProjectArgs = Prefs.get(PlugInConstants.Z_PROJECT_ARGS, PlugInConstants.Z_PROJECT_DFLT)
        gd.addStringField("Morphological Filters args:", morphologicalFiltersArgs, 80)
        gd.addStringField("3D Objects Counter    args:", threeDObjectsCounterArgs, 80)
        gd.addStringField("Z Project .  .  .  .  .  .  . args:", zProjectArgs, 80)

        gd.showDialog()

        // Check if the dialog was canceled
        if (gd.wasCanceled()) {
            println("User canceled dialog!")
            return null
        }
        
        // Process the dialog
        directoryRoot = gd.getNextString()
        Prefs.set(PlugInConstants.ROOT_DIR_OPT, directoryRoot)
        
        def processValues = []
        processValues << gd.getNextBoolean() // Color Split
        processValues << gd.getNextBoolean() // Morphological Filters
        processValues << gd.getNextBoolean() // 3D Object Counter
        processValues << gd.getNextBoolean() // Z Project
        processValues << gd.getNextBoolean() // Batch Measure
        processValues << gd.getNextBoolean() // Summary Excel

        Prefs.set(PlugInConstants.COLOR_SPLIT_OPT,           processValues[0])
        Prefs.set(PlugInConstants.MORPHOLOGICAL_FILTERS_OPT, processValues[1])
        Prefs.set(PlugInConstants.THREE_D_OBJECT_COUNTER_OPT,processValues[2])
        Prefs.set(PlugInConstants.Z_PROJECT_OPT,             processValues[3])
        Prefs.set(PlugInConstants.BATCH_MEASURE_OPT,         processValues[4])
        Prefs.set(PlugInConstants.SUMMARY_EXCEL_OPT,         processValues[5])

        def fluorescences = []
        def select488 = gd.getNextBoolean() // 488 Checkbox
        def select561 = gd.getNextBoolean() // 561 Checkbox
        if(select488) fluorescences << "488"
        if(select561) fluorescences << "561"
    
        Prefs.set(PlugInConstants.FOUR_88_OPT, select488)
        Prefs.set(PlugInConstants.FIVE_61_OPT, select561)
        
        def processArgs = []
        processArgs << "None"             // Color Split
        processArgs << gd.getNextString() // Morphological Filters
        processArgs << gd.getNextString() // 3D Object Counter
        processArgs << gd.getNextString() // Z Project
        processArgs << "None"             // Batch Measure
        processArgs << "None"             // Summary Excel
        
        Prefs.set(PlugInConstants.MORPHOLOGICAL_FILTERS_ARGS, processArgs[1])
        Prefs.set(PlugInConstants.THREE_D_OBJECT_COUNTER_ARGS, processArgs[2])
        Prefs.set(PlugInConstants.Z_PROJECT_ARGS, processArgs[3])
        Prefs.savePreferences() 
        return [directoryRoot, fluorescences, processValues, processArgs]
    }

    // Program bootstrap: Display Menu and process the given folder
    def runPipeline() {
        // Add the writeExcelSheet method to the GLDataframe
        // Since we want to keep GLDataframe lite weight we do not want all the Excel Code built in
        //ExpandoMetaClass.enableGlobally()
        //GLDataframe.metaClass.writeExcelSheet = writeExcelSheet

        def options = getOptions()
        if (options != null) {
            def (directoryRoot, fluorescences, processValues, processArgs) = options
            def debugLogger = GLLogger.getLogger("debug", directoryRoot)
            /******************* LOGGER LEVEL *************************/
            debugLogger.setLevel(GLLogger.LogLevel.DEBUG)
            def logger = GLLogger.getLogger("log", directoryRoot)
            def startTime = new Date()
            logger.log("Started at: "+startTime.format('yyyy-MM-dd_HH:mm:ss')+"  | In Dir: "+directoryRoot )
            def groovyVersion = GroovySystem.getVersion()
            logger.log("Groovy "+ (' '*26)+ "| Version: " + groovyVersion )
            
            fluorescences.each { fluorescence ->
                def of = { indx -> process_labels.findIndexOf { it == indx } }
                if (processValues[of(COLOR_SPLIT)]) {
                    def args = processArgs[of(COLOR_SPLIT)]
                    def colorSplitter = new ColorSplitter(directoryRoot, fluorescence)
                    logger.log("Color Splitter","Called on fluorescence: " + fluorescence)
                    colorSplitter.processDirectory()
                }
                
                if (processValues[1]) {
                    def args = processArgs[1]
                    def morphologicalFilters = new MorphologicalFilters(directoryRoot, fluorescence, args)
                    logger.log("Morphological Filters","Called on fluorescence: " + fluorescence)
                    logger.log("Morphological Filters","Called with arguments:  " + args)
                    morphologicalFilters.processDirectory()
                }
                
                if (processValues[2]) {
                    def args = processArgs[2]
                    def threeDObjectsCounter = new ThreeDObjectsCounter(directoryRoot, fluorescence, args)
                    logger.log("3D Object Counter","Called on fluorescence: " + fluorescence)
                    logger.log("3d Object Counter","Called with arguments:  " + args)
                    threeDObjectsCounter.processDirectory()
                }
                
                if (processValues[3]) {
                    def args = processArgs[3]
                    def zProject = new ZProject(directoryRoot, fluorescence, args)
                    logger.log("Z Projection","Called on fluorescence: " + fluorescence)
                    logger.log("Z Projection","Called with arguments:  " + args)
                    zProject.processDirectory()
                }
        
                if (processValues[4]) {
                    def args = processArgs[4]
                    def batchMeasure = new BatchMeasure(directoryRoot, fluorescence)
                    logger.log("Batch Measure","Called on fluorescence: " + fluorescence)
                    batchMeasure.processDirectory()
                }
                
            }
        
            if (processValues[5]) {
                def args = processArgs[4]
                def summaryExcel = new SummaryExcel(directoryRoot)
                logger.log("Excel Summary","Will Process all available fluorescence")
                summaryExcel.processDirectory()
            }
        
            def endTime = new Date()
            logger.logDuration(startTime, endTime)
        }
        
    }

}
